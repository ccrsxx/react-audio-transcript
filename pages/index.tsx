import { useState, useEffect, useRef } from 'react';
import {
  PlayIcon,
  PauseIcon,
  SpeakerWaveIcon,
  SpeakerXMarkIcon,
  DocumentTextIcon
} from '@heroicons/react/24/solid';
import { transcript } from '@lib/transcript';
import { SEO } from '@components/common/seo';
import { TranscriptCard } from '@components/transcript-card';
import type { ChangeEvent } from 'react';

type AudioState = 'playing' | 'paused';

export default function Home(): JSX.Element {
  const [audioState, setAudioState] = useState<AudioState>('paused');
  const [muted, setMuted] = useState(false);

  const [seek, setSeek] = useState(0);
  const [volume, setVolume] = useState(1);

  const audioContainer = useRef<HTMLDivElement>(null);

  const handleSeekChange = (e: ChangeEvent<HTMLInputElement>): void => {
    const value = Number(e.target.value);
    const max = Number(e.target.max);

    const percent = (value / max) * 100;

    setSeek(percent);

    audioContainer.current?.style.setProperty(
      '--seek-before-width',
      `${percent}%`
    );
  };

  const handleVolumeChange = (e: ChangeEvent<HTMLInputElement>): void => {
    const value = Number(e.target.value);
    const max = Number(e.target.max);

    const percent = (value / max) * 100;

    setVolume(percent);

    audioContainer.current?.style.setProperty(
      '--volume-before-width',
      `${percent}%`
    );
  };

  const toggleAudioState = (): void => {
    if (audioState === 'playing') setAudioState('paused');
    else setAudioState('playing');
  };

  const toggleMuted = (): void => {
    if (muted) setMuted(false);
    else setMuted(true);
  };

  return (
    <div className='h-screen p-8'>
      <SEO
        title='Next.js Template'
        description='Generated by create next app.'
      />
      <main
        className='mx-auto grid h-full w-full max-w-2xl divide-y 
                  divide-gray-300 rounded-md border border-gray-300'
      >
        <section className='flex items-center gap-2 px-8 py-4'>
          <i>
            <DocumentTextIcon className='h-6 w-6 text-blue-400' />
          </i>
          <h2 className='text-xl font-bold text-gray-700'>Transcript</h2>
        </section>
        <section className='grid gap-4 overflow-y-auto p-4'>
          {transcript.map((data, index) => (
            <TranscriptCard {...data} key={index} />
          ))}
        </section>
        <section className='p-4'>
          <audio controls src='/transcript.mp3' />
          <div className='audio-player-container' ref={audioContainer}>
            <button id='play-icon' onClick={toggleAudioState}>
              {audioState === 'playing' ? (
                <PauseIcon className='h-6 w-6' />
              ) : (
                <PlayIcon className='h-6 w-6' />
              )}
            </button>

            <span id='current-time' className='time'>
              0:00
            </span>
            <input
              type='range'
              id='seek-slider'
              max='100'
              value={seek}
              onChange={handleSeekChange}
            />

            <span id='duration' className='time'>
              0:00
            </span>
            <output id='volume-output'>{Math.round(volume)}</output>

            <input
              type='range'
              id='volume-slider'
              max='100'
              value={volume}
              onChange={handleVolumeChange}
            />
            <button id='mute-icon' onClick={toggleMuted}>
              {muted ? (
                <SpeakerXMarkIcon className='h-6 w-6' />
              ) : (
                <SpeakerWaveIcon className='h-6 w-6' />
              )}
            </button>
          </div>
        </section>
      </main>
    </div>
  );
}
